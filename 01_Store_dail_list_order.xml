<channel version="3.8.1">
  <id>c73fb47f-0bf4-480b-ab2d-91e552d22714</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>01_Store_dail_list_order</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="3.8.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.8.1">
      <pluginProperties/>
      <sourceConnectorProperties version="3.8.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>false</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>4</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.8.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Build Generic Out Object</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>// Default error response.
var out = {};
out.success = false;
out.results = [];
out.error = [];

channelMap.put(&quot;out&quot;, out);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Build Generic Metadata Object</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>// Default error response.
var meta = {};
meta.http_code = &quot;500&quot;;
meta.audit_log = {};

channelMap.put(&quot;responseCode&quot;, meta.http_code); // Default code if all goes wrong.
channelMap.put(&quot;meta&quot;, meta);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Build Generic Input Object</name>
          <sequenceNumber>2</sequenceNumber>
          <enabled>true</enabled>
          <script>var input = {};
channelMap.put(&quot;input&quot;, input);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Determine Action from Input</name>
          <sequenceNumber>3</sequenceNumber>
          <enabled>true</enabled>
          <script>var out = $(&apos;out&apos;);
var meta = $(&apos;meta&apos;);
var input = $(&apos;input&apos;);

try
{
	//logger.debug(&quot;[Store_dail_listorder] made it to Determine Action from Input&quot;);
	// Copy meta from incoming request
	const incomingMessage = connectorMessage.getRawData();
	//logger.debug(&quot;[Store_dail_listorder] incoming message: &quot; + incomingMessage);
	if(incomingMessage==&quot;&quot; || incomingMessage==null){
		
		throw channelName + &quot; missing input data&quot;;
	}
	const messageObject = JSON.parse(incomingMessage);
	
	var myInput = messageObject;
	
	if (myInput == null)
	{
		throw channelName + &quot; missing input data&quot;;
	}

	//meta[&apos;command&apos;] = &quot;INTAKE&quot;;
	Object.assign(input, myInput);

}
catch (e)
{
	logger.error(channelName + &quot; endpoint source transformer error: &quot; + e);

	var myError = e;

	out.error.push(myError);
}
finally
{
	
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Determine Destination Set</name>
          <sequenceNumber>4</sequenceNumber>
          <enabled>true</enabled>
          <script>var out = $(&apos;out&apos;);
var meta = $(&apos;meta&apos;);

if (out.error.length &gt; 0)
{
	// if we had any errors, don&apos;t try to process.
	const error_message_set = [&quot;RETURN_VALUE&quot;]
	destinationSet.removeAllExcept(error_message_set);
}
else
{
	const process_message_set = [&quot;STORE_DATA&quot;, &quot;RETURN_VALUE&quot;];
	destinationSet.removeAllExcept(process_message_set);
}

out[&apos;command&apos;] = meta.command; // for easier debugging</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.8.1">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.8.1">
      <metaDataId>1</metaDataId>
      <name>STORE_DATA</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.8.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>//logger.debug(&quot;[Store_dail_listorder] reached&quot;);

var out = $(&apos;out&apos;);
var meta = $(&apos;meta&apos;);
var input = $(&apos;input&apos;);
var dbConn;
var formatter = java.time.format.DateTimeFormatter.ofPattern(&apos;yyyyMMdd&apos;);
var camp_id = &quot;d8880ea4-ea4b-4658-8c92-2113b33ba940&quot;;
try
{
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(
		configurationMap.get(&quot;DB_DRIVER_BAAS&quot;),
		configurationMap.get(&quot;DB_NAME_BAAS&quot;),
		configurationMap.get(&quot;DB_USER_BAAS&quot;),
		configurationMap.get(&quot;DB_PASS_BAAS&quot;)
	);

	//Get column mapping for jason value of csv
	var columnMapping = input.headerMap;//getColumnMapping();
	
	var row = input.data;
	var rec ={};
	for(ele in row){
		rec[columnMapping[ele]]=row[ele];
	}
	
	try {
		var pos = [];
		var cols = [];
		var values = [];
		var dateFromMeta02 = null;
		
		// Prepare Dynamic Query inserts
		for (prop in rec) 
		{
			pos.push(&apos;?&apos;);
	          cols.push(prop);
			values.push(rec[prop]);
		}
		var existingRecordQuery = &quot;select appointment_id from outbound.sso_spinsci_diallist_order &quot;
							 +&quot;where is_scheduled =&apos;FALSE&apos; and appointment_id=&apos;&quot;+rec.appointment_id+&quot;&apos;&quot;;
		logger.info(&quot;CheckExistingRecord:&quot;+existingRecordQuery);
		var existingRec = dbConn.executeCachedQuery(existingRecordQuery);

		if(existingRec.next()){
			// need to add update logic on found existing record;
			out.appointment_id = rec.appointment_id;
			logger.debug(&quot;Found existing record with appointment_id : &quot;+rec.appointment_id);
		}else{
			var stmt = 
					&apos;insert into outbound.sso_spinsci_diallist_order (&apos; +
						cols.join(&apos;,&apos;) + 
					&apos;) values (&apos; + 
						pos.join(&apos;,&apos;) + 
					&apos;) &apos; +
					&apos;returning &apos; +
					&apos;appointment_id&apos;;
				
					var queryAndValuesObject = {
						query: stmt,
						values: values	
					};
					channelMap.put( &quot;sso_spinsci_diallist_order_Add_QueryAndValuesObject&quot;, queryAndValuesObject );
					
					var keys = dbConn.executeUpdateAndGetGeneratedKeys(
						stmt,
						values
					);
					keys.beforeFirst();
					var queueRec = {camp_id:camp_id,
								attempt_number:0,
								msg_type:&quot;ORDER&quot;,
								channel_type:&quot;VOICE&quot;};
					
					if (keys.next()){
						queueRec[&quot;ref_id&quot;]=keys.getString(&quot;appointment_id&quot;);
						out.appointment_id = keys.getString(&quot;appointment_id&quot;);
					}
					
					var queueRecord = addDailListQueue(dbConn,queueRec);
					queueRecord[&quot;transaction_type&quot;]=&quot;INSERT&quot;;
					addDailListQueueHistory(dbConn,queueRec);
		}
	     
		
		
	} catch (e) {
		var myError = e;
		throw e;
		//out.error.push(myError);	
	}
}catch(e){
	throw e;
} finally {
	
	if(dbConn){
		dbConn.close();	
	}
}


</script>
      </properties>
      <transformer version="3.8.1">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.8.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.8.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.8.1">
      <metaDataId>2</metaDataId>
      <name>RETURN_VALUE</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.8.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>const output = $(&apos;out&apos;);
const metadata = $(&apos;meta&apos;);

// PrepareError might have set a response code. If not, we&apos;re happy to say OK.
metadata.http_code = $(&apos;responseCode&apos;) || &apos;200&apos;;

const final_answer = {
	&apos;output&apos;: output,
	&apos;metadata&apos;: metadata
};

connectorMap.put(&apos;final_answer&apos;, final_answer);

return JSON.stringify(final_answer);</script>
      </properties>
      <transformer version="3.8.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.8.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.8.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.8.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.8.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1601627226458</time>
        <timezone>UTC</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>45</pruneMetaDataDays>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
  </exportData>
</channel>