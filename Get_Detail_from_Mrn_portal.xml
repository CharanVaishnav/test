<channel version="3.8.1">
  <id>a319a5c6-5c79-4b92-9b22-93579f3310ef</id>
  <nextMetaDataId>5</nextMetaDataId>
  <name>Get_Detail_from_Mrn_portal</name>
  <description>This channel is used to get the campaign data by using the campaign Id</description>
  <revision>6</revision>
  <sourceConnector version="3.8.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.8.1">
      <pluginProperties/>
      <sourceConnectorProperties version="3.8.1">
        <responseVariable>d3</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
          <entry>
            <string>63f12d9e-aff9-43ae-9350-f029f4c8c5c3</string>
            <string>decryption</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.8.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Build Generic Out Object</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>// Default error response.
var out = {};
out.success = false;
out.results = [];
out.error = [];

channelMap.put(&quot;out&quot;, out);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Build Generic Metadata Object</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>// Default error response.
var meta = {};
meta.http_code = &quot;500&quot;;
meta.audit_log = {};

channelMap.put(&quot;responseCode&quot;, meta.http_code); // Default code if all goes wrong.
channelMap.put(&quot;meta&quot;, meta);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Build Generic Input Object</name>
          <sequenceNumber>2</sequenceNumber>
          <enabled>true</enabled>
          <script>var input = {};

channelMap.put(&quot;input&quot;, input);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Determine Action from Input</name>
          <sequenceNumber>3</sequenceNumber>
          <enabled>true</enabled>
          <script>var out = $(&apos;out&apos;);
var meta = $(&apos;meta&apos;);
var input = $(&apos;input&apos;);

try
{
	const incomingMessage = connectorMessage.getRawData();
	const messageObject = JSON.parse(incomingMessage);
	

	var myMetadata = messageObject[&apos;metadata&apos;];

	if (myMetadata == null)
	{
		throw channelName + &quot; missing metadata from router channel&quot;;
	}

	Object.assign(meta, myMetadata); // Copy in parent meta data to local metadata.
  	var method = meta[&apos;method&apos;];
	var action = determineActionFromMethod(method);
	meta[&apos;command&apos;] = action; 
  	var myInput = messageObject[&apos;input&apos;];
	Object.assign(input, myInput);
	
}
catch (e)
{
	logger.error(channelName + &quot; endpoint source transformer error: &quot; + e);
	
	var myError = PrepareError(
		&quot;TRAPPED_EXCEPTION&quot;, 
		channelName + &quot; endpoint source transformer &quot;,
		e
	);

	out.error.push(myError);
}

function determineActionFromMethod(method)
{
	var action = &apos;&apos;;

	if (method == &quot;POST&quot;)
	{
		action = &quot;CREATE&quot;;
	}
     else if (method == &quot;PUT&quot;)
	{
		action = &quot;UPDATE&quot;;
	}
     else if (method == &quot;DELETE&quot;)
	{
		action = &quot;DELETE&quot;;
	}
	else if (method == &quot;GET&quot;)
	{
		action = &quot;GET&quot;;
	}
	else
	{
		action = &quot;METHOD_NOT_VALID&quot;;
		myError = PrepareError(
			&quot;METHOD_NOT_VALID&quot;,
			channelName + &quot; endpoint source transformer &quot;,
			&quot;Unacceptable method received: &quot; + method 
		);
	
		out.error.push(myError);
	}

	return action;
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
          <name>Determine Destination Set</name>
          <sequenceNumber>4</sequenceNumber>
          <enabled>true</enabled>
          <script>var out = $(&apos;out&apos;);
var meta = $(&apos;meta&apos;);

if (out.error.length &gt; 0)
{
	// if we had any errors, don&apos;t try to process.
	const error_message_set = [&quot;RETURN_VALUE&quot;]
	destinationSet.removeAllExcept(error_message_set);
}
else
{
	const process_message_set = [meta.command, &quot;RETURN_VALUE&quot;];
	destinationSet.removeAllExcept(process_message_set);
}

out[&apos;command&apos;] = meta.command; // for easier debugging</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.8.1">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.8.1">
      <metaDataId>4</metaDataId>
      <name>GET</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.8.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
            <entry>
              <string>63f12d9e-aff9-43ae-9350-f029f4c8c5c3</string>
              <string>decryption</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>logger.debug(&quot;Reached &quot; + $(&apos;channel Name&apos;));
var dbConn = null;
var out = null;
var id = $(&apos;id&apos;);
logger.debug(&quot;id :: &quot;+id);
try {
	//opening the database connection
	dbConn = getdbConnection();
	logger.debug(&quot;db conn:&quot; + dbConn);

	// var declaration
	var query = &quot;&quot;;
	var queryResult = &quot;&quot;;
	var results = [];
	var i = 0;
     var paramList = [];
     var campaign =&quot;&quot;;
	// calling the function
	query = getQuery(id);

	paramList.push(id);
	// executing the Query
	queryResult = dbConn.executeCachedQuery(query);
	logger.debug(&quot;query result: &quot; + queryResult);
      // sso_spinsci_get_campagn_by_cisco
	// getting the results from database
	while (queryResult.next()) {

		  results.push({
				id :queryResult.getString(&apos;id&apos;),
				request_id :	queryResult.getString(&apos;appointment_id&apos;),
				created_date :	queryResult.getString(&apos;created_date&apos;),
				current_wqs :	queryResult.getString(&apos;current_wqs&apos;),
				status :	queryResult.getString(&apos;current_wqs_tab&apos;),
				department_id :	queryResult.getString(&apos;department_id&apos;),
				is_scheduled :	queryResult.getString(&apos;is_scheduled&apos;),
				patient_dob :	queryResult.getString(&apos;patient_dob&apos;),
				patient_mrn :	queryResult.getString(&apos;patient_mrn&apos;),
				patient_name :	queryResult.getString(&apos;patient_name&apos;),
				patient_phone_num :	queryResult.getString(&apos;patient_phone_num&apos;),
				patient_preff_language :	queryResult.getString(&apos;patient_preff_language&apos;),
				procedure_name :	queryResult.getString(&apos;procedure_name&apos;),
				creation_department :	queryResult.getString(&apos;requesting_department&apos;),
				requesting_provider :	queryResult.getString(&apos;requesting_provider&apos;),
				specialty_id :	queryResult.getString(&apos;specialty_id&apos;),
				updated_date :	queryResult.getString(&apos;updated_date&apos;),
				visit_type :	queryResult.getString(&apos;visit_type&apos;)
				
			});
			
		
         
	}
	channelMap.put(&apos;responseCode&apos;, &quot;200&quot;);
			channelMap.put(&quot;out&quot;, {
				success: true,
				results: results
			});
	logger.debug(&quot;next()&quot;+results);
} catch (e) {
	logger.error(channelName + &quot; endpoint destination transformer error: &quot; + e);
	// preparing custom error
	var myError = PrepareError(
		&quot;QUERY_NOT_VALID&quot;,
		channelName + &quot; endpoint destination transformer &quot;,
		e
	);
	results.push({
				error_message : myError,
				campaign_id : id
			});
			channelMap.put(&apos;responseCode&apos;, myError.http_code);
			channelMap.put(&quot;out&quot;, {
				success: false,
				results: results
			});
} finally {
	if (dbConn != null) {
		dbConn.close(); // Don&apos;t leave connections open.
	}
	
}
return $(&apos;out&apos;);
// called function
function getQuery(mrn) {
	var query = &quot;select * from outbound.sso_spinsci_diallist_order where patient_mrn = &apos;&quot;+mrn+&quot;&apos; &quot;;
	logger.debug(&quot;[Get_Detail_By_Mrn]:[get] query: &quot; + query);
	return query;
}</script>
      </properties>
      <transformer version="3.8.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.1">
            <name>getId</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>var req = JSON.parse(msg);
logger.debug(&quot;req ::: &quot;+req);

var id = trim2(req.metadata.parameters.id);
logger.debug(&quot;id :: &quot;+id);

channelMap.put(&quot;id&quot;, id);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.8.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.8.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.8.1">
      <metaDataId>3</metaDataId>
      <name>RETURN_VALUE</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.8.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
            <entry>
              <string>63f12d9e-aff9-43ae-9350-f029f4c8c5c3</string>
              <string>decryption</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>const output = $(&apos;out&apos;);
const metadata = $(&apos;meta&apos;);

if (output.success == true) {
metadata.http_code = &apos;200&apos;;
}
else
{
// PrepareError might have set a response code. If not, we failed to reach success for unclear reasons.
metadata.http_code = $(&apos;responseCode&apos;) || &apos;500&apos;;
}

const final_answer = {
&apos;output&apos;: output,
&apos;metadata&apos;: metadata
};

connectorMap.put(&apos;final_answer&apos;, final_answer);

return JSON.stringify(final_answer);</script>
      </properties>
      <transformer version="3.8.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.8.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.8.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.8.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.8.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.8.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>PRODUCTION</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.8.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
      <entry>
        <string>63f12d9e-aff9-43ae-9350-f029f4c8c5c3</string>
        <string>decryption</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1601962856400</time>
        <timezone>UTC</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>15</pruneMetaDataDays>
        <archiveEnabled>false</archiveEnabled>
      </pruningSettings>
    </metadata>
  </exportData>
</channel>